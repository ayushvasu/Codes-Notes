
#libraryDependencies ++= Seq(
#  "org.apache.spark" %% "spark-core" % "2.2.1" % "provided",
#  "org.apache.spark" %% "spark-sql" % "2.2.1" % "provided",
#  "org.apache.spark" %% "spark-hive" % "2.2.1" % "provided",
#
#  "com.datastax.spark" %% "spark-cassandra-connector" % "2.0.5",
#
#  "com.typesafe" % "config" % "1.3.1",
#  "com.typesafe.akka" %% "akka-actor" % "2.3.16",
#  "com.typesafe.akka" %% "akka-slf4j" % "2.3.16"
#)

#-------------------------------------------------------LOG 4J --------------------------------------------------------------------------------------------

# Set everything to be logged to file and console
log4j.rootCategory=WARN, file, console

log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.append=true
log4j.appender.file.file=logs/spark.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss.SSS} %t %p %c{1} %m%n

log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.target=System.err
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1} %m%n

# Settings to quiet third party logs that are too verbose
log4j.logger.org.spark-project.jetty=WARN
log4j.logger.org.spark-project.jetty.util.component.AbstractLifeCycle=ERROR
log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper=INFO
log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter=INFO
log4j.logger.org.apache.parquet=ERROR
log4j.logger.parquet=ERROR

# SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs in SparkSQL with Hive support
log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler=FATAL
log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry=ERROR

# custom application logs goes to another file
log4j.logger.com.ayush.Config=INFO, RollingAppenderApp
log4j.logger.com.ayush.DataFrameCombiner=INFO, RollingAppenderApp
log4j.logger.com.ayush.ETL=INFO, RollingAppenderApp
log4j.logger.com.ayush.Event=INFO, RollingAppenderApp
log4j.logger.com.ayush.EventController=INFO, RollingAppenderApp
log4j.logger.com.ayush.EventTblPartitions=INFO, RollingAppenderApp
log4j.logger.com.ayush.EventTbl=INFO, RollingAppenderApp
log4j.logger.com.ayush.Session=INFO, RollingAppenderApp
log4j.logger.com.ayush.SessionController=INFO, RollingAppenderApp
log4j.logger.com.ayush.SessionTbl=INFO, RollingAppenderApp
log4j.logger.com.ayush.HelperData=INFO, RollingAppenderApp
log4j.logger.com.ayush.Main=INFO, RollingAppenderApp
log4j.logger.com.ayush.Metadata=INFO, RollingAppenderApp
log4j.logger.com.ayush.Section=INFO, RollingAppenderApp
log4j.logger.com.ayush.SparkDriver=INFO, RollingAppenderApp
log4j.logger.com.ayush.VerticaWriter=INFO, RollingAppenderApp

log4j.appender.RollingAppenderApp=org.apache.log4j.DailyRollingFileAppender
log4j.appender.RollingAppenderApp.File=logs/s-c2r.log
log4j.appender.RollingAppenderApp.DatePattern='.'yyyy-MM-dd
log4j.appender.RollingAppenderApp.layout=org.apache.log4j.PatternLayout
log4j.appender.RollingAppenderApp.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1} %m%n



#-------------------------------------------------SLF 4j-----------------------------------------------------------------------------------------------------------


#Examples# https://www.stubbornjava.com/posts/logging-in-java-with-slf4j-and-logback
#Examples# https://www.mkyong.com/logging/logback-xml-example/
#Appenders# https://dzone.com/articles/log-appender-what-is-it-and-why-would-you-use-it
#Appenders#  https://logback.qos.ch/manual/appenders.html

<?xml version="1.0" encoding="UTF-8"?>
<configuration>

	<property name="DEV_HOME" value="c:/logs" />

	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>
				%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
			</Pattern>
		</layout>
	</appender>
	
	<appender name="FILE-AUDIT"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${DEV_HOME}/debug.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>
				%d{yyyy-MM-dd HH:mm:ss} - %msg%n
			</Pattern>
		</encoder>

		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily -->
			<fileNamePattern>${DEV_HOME}/archived/debug.%d{yyyy-MM-dd}.%i.log
                        </fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>

	</appender>

	<appender name="FILE-ERROR"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${DEV_HOME}/error.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>
				%d{yyyy-MM-dd HH:mm:ss} - %msg%n
			</Pattern>
		</encoder>

		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily -->
			<fileNamePattern>${DEV_HOME}/archived/error.%d{yyyy-MM-dd}.%i.log
                        </fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>

	</appender>
	
	<!-- Send logs to both console and file audit -->
	<logger name="com.mkyong.web" level="debug"
		additivity="false">
		<appender-ref ref="FILE-AUDIT" />
		<appender-ref ref="STDOUT" />
	</logger>

	<root level="error">
		<appender-ref ref="FILE-ERROR" />
	</root>

</configuration>
